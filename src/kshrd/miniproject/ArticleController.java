package kshrd.miniproject;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

public class ArticleController implements Manipulable {
	
	private ArticleModel articleModel;		
	private ArticleView articleView;
	private List<ArticleModel> myList;
	private int autoId = 0;

	public ArticleController(ArticleModel articleModel, ArticleView articleView) {
		
		this.articleModel = articleModel;
		this.articleView = articleView;
		
		myList = new ArrayList<>();
		
		autoGenerateData(myList, 100);
		showView();
		
	}
	
	public void showView() {
		
		Scanner input = new Scanner(System.in);
		String strInput = "";

		do {
			
			articleView.initGui(myList, articleView.getMaxRow());
			
			System.out.print("\n--> Choose: ");
			strInput = input.next();
			System.out.println();
			
			switch (strInput) {
			case "1":
				
				break;
			case "5": 
				
				System.out.print("Input ID of article: ");
				read(myList, input.nextInt());
				break;  
				
			case "6":
				
				write(myList, input);
				break;
				
			case "7":
				
				search(myList, input);
				break;
			
			case "8":
				
				System.out.print("Input ID of article to update: ");
				update(myList, input.nextInt(), input);
				break;
			
			case "9":
				
				System.out.print("Input ID to delete: ");
				delete(myList, input.nextInt(), input);
				break;
				
			case "10":
				
				System.out.print("Input Maximum of Row: ");
				articleView.setMaxRow(input.nextInt());
				break;
				
			}
			
		} while (!strInput.equals("0"));
		
	}
	
	/* This method uses for testing input speed only */
	public void autoGenerateData(List<ArticleModel> list, int n) {
		
		for (int i = 1; i <= n; i++) {
			
			articleModel = new ArticleModel();
			
			articleModel.setId(++autoId);
			articleModel.setTitle("title" + i);
			articleModel.setAuthor("author" + i);
			articleModel.setContent("hellololo" + i);
			articleModel.setDateByAuto(); 
			
			list.add(articleModel);
			
		}
		
	}

	@Override
	public void read(List<ArticleModel> objList, int id) {
		
		int i = getListIndexById(objList, id);
		
		if (i != -1) {
			
			System.out.println();
			System.out.println("         [Read Detail]\n");
			System.out.println("ID       : " + objList.get(i).getId());
			System.out.println("TITLE    : " + objList.get(i).getTitle());
			System.out.println("AUTHOR   : " + objList.get(i).getAuthor());
			System.out.println("DATE     : " + objList.get(i).getDate());
			System.out.println("CONTENT  : " + objList.get(i).getContent());
		
		} else {
			System.err.println("Invalid ID! No record found.");
		}
		
		pause("Press Enter to continue...");
		
	}
	
	@Override
	public void write(List<ArticleModel> obj, Scanner input) {
		
		articleModel = new ArticleModel();
		
		input.nextLine(); // Clear Buffer
		
		System.out.print("Input Title: ");
		String title = input.nextLine(); 
	
		System.out.print("Input Author: ");
		String author = input.nextLine();  
		
		System.out.print("Input Content: ");
		String content = input.nextLine(); 
		
		System.out.println("Do you want to save ? y/n: ");
		String str = input.nextLine();
		
		if (str.equalsIgnoreCase("y")) {
			
			articleModel.setTitle(title);
			articleModel.setAuthor(author);
			articleModel.setContent(content);
			articleModel.setId(++autoId);
			articleModel.setDateByAuto();
			
			myList.add(articleModel);
			
			System.out.println("\nRecord saved success.");
		} 				
		
		pause("Press Enter to continue...");
		
		System.out.println();		
		
	}

	@Override
	public void search(List<ArticleModel> objList, Scanner input) {
		
		List<ArticleModel> newArrayList = new ArrayList<>();
		
		String str = "";
		
		do {
			input.nextLine();  /* Flush Buffer */
			
			newArrayList.clear();
			
			System.out.println("\nSearch By: ");
			System.out.println("\n[ 1.Title    2.Author    3.Date    4.All    5.Back]");
			System.out.print("\n--> Choose: ");
			
			str = input.nextLine();
			boolean flag = false;
			switch (str) {
			case "1":
				
				System.out.print("\nInput title to search: ");
				str = (input.nextLine()).toLowerCase();
				
				for (ArticleModel obj : objList) {
					if ( obj.getTitle().toLowerCase().contains(str) ) {
						
						articleView.generateHeader();
						articleView.generateMenuView();
						
						newArrayList.add(obj);
						
						articleView.generateTableView(newArrayList, articleView.getMaxRow());
						
						flag = true;
					} 
				}
				
				if ( !flag ) System.err.println("\nNo record found.");
				pause("Press Enter to continue...");
				
				break;
			
			case "2":
				
				System.out.print("Input author to search: ");
				str = (input.nextLine()).toLowerCase();
				
				for (ArticleModel obj : objList) {
					if ( obj.getAuthor().toLowerCase().contains(str) ) {
						//System.out.println(obj.getTitle() + "  " + obj.getAuthor() + "  " + obj.getDate() + "  " + obj.getContent() );
						newArrayList.add(obj);
						
						articleView.generateTableView(newArrayList, articleView.getMaxRow());	
						flag = true;
					} 
				}
				
				if ( !flag ) System.err.println("\nNo record found.");
				pause("Press Enter to continue...");
				break;
				
			case "3":
				
				System.out.print("\nInput date to search: ");
				str = (input.nextLine()).toLowerCase();
				
				for (ArticleModel obj : objList) {
					if ( obj.getDate().toLowerCase().contains(str) ) {
						//System.out.println(obj.getTitle() + "  " + obj.getAuthor() + "  " + obj.getDate() + "  " + obj.getContent() );
						newArrayList.add(obj);
						
						articleView.generateTableView(newArrayList, articleView.getMaxRow());
						flag = true;
					} 
				}
				
				if ( !flag ) System.err.println("\nNo record found.");
				pause("Press Enter to continue...");
				
				break;
				
			case "4":
				
				System.out.print("\nInput text to search: ");
				str = (input.nextLine()).toLowerCase();
				
				for (ArticleModel obj : objList) {
					if ( obj.getTitle().toLowerCase().contains(str) || obj.getAuthor().toLowerCase().contains(str) || obj.getDate().toLowerCase().contains(str) ) {
						//System.out.println(obj.getTitle() + "  " + obj.getAuthor() + "  " + obj.getDate() + "  " + obj.getContent() );
						newArrayList.add(obj);
						
						articleView.generateTableView(newArrayList, articleView.getMaxRow());
						flag = true;
					} 
				}
				
				if ( !flag ) System.err.println("\nNo record found.");
				pause("Press Enter to continue...");
				
				break;
			}
			
			
		} while (!str.equals("5"));
		
	}

	@Override
	public void delete(List<ArticleModel> objList, int id, Scanner input) {
		
		input.nextLine(); /* Flush Buffer */
		
		int index = getListIndexById(objList, id);

		String str = "";
		
		if (index >=0 ) {
			
			System.out.print("\nAre you sure? The record with ID [" + id + "]" + " will be deleted? y/n: ");
			str = input.nextLine();
			
			if ( str.equalsIgnoreCase("y") ) {
				objList.remove(index);
				System.out.println("\nRecord deleted.");
			}
			
		} else {
			
			System.out.println("\nInvalid ID! Record not found.");
			
		}
		
		pause("Press Enter to continue...");
		
	}
	
	@Override
	public void update(List<ArticleModel> objList, int id, Scanner input) {
		
		int index = getListIndexById(objList, id );
		
		ArticleModel tempArticleModel = objList.get(index);
		
		String str = "";
		String st = "";
		
		do {
			
			input.nextLine(); /* Flush Buffer */
			
			System.out.println("\n[ 1.Title    2.Author    3.Content    4.Back ]");
			
			System.out.print("\n--> Choose what to update: ");
			
			str = input.nextLine();
			
			switch (str) {
			case "1": 
				
				System.out.print("\nInput new title: ");
				String newTitle = input.nextLine();
				
				System.out.print("\nDo you want to save? y/n: ");
				st = input.nextLine();
				
				if ( st.equalsIgnoreCase("y") ) {
					tempArticleModel.setTitle(newTitle);
					System.out.println("\nRecord saved.");
					pause("Press Enter to continue...");
				} 
				
				break;
				
			case "2":
				
				System.out.print("\nInput new author: ");
				String newAuthor = input.nextLine();
				
				System.out.print("\nDo you want to save? y/n: ");
				st = input.nextLine();
				
				if ( st.equalsIgnoreCase("y") ) {
					
					tempArticleModel.setAuthor(newAuthor);
					System.out.println("\nRecord saved.");
					pause("Press Enter to continue...");
				}
				
				break;
				
			case "3":
				
				System.out.print("\nInput new content: ");
				String newContent = input.nextLine();
				
				System.out.print("\nDo you want to save? y/n: ");
				st = input.nextLine();
				
				if ( st.equalsIgnoreCase("y") ) {
					
					tempArticleModel.setContent(newContent);
					System.out.println("\nRecord saved.");
					pause("Press Enter to continue...");
				}
				
				break;
			}
			
		}while (!str.equals("4"));
		
	}

	public int getListIndexById(List<ArticleModel> objList, int id) {
		
		Comparator<Object> comparator = new Comparator<Object>() {

			@Override
			public int compare(Object o1, Object o2) {
				
				ArticleModel obj1 = ((ArticleModel)o1);
				Integer obj2 = ((Integer)o2);
				if ( obj1.getId() < obj2.intValue() ) 
					return -1;
				else if ( obj1.getId() > obj2.intValue() ) 
					return 1;
				else 
					return 0;
				
			}
			
		};
		
		Collections.sort(objList);
		
		return Collections.binarySearch(objList, id, comparator);
		
	}
	
	/*public int getListIndexByTitle(List<ArticleModel> objList, String title) {
		
		Comparator<Object> comparator = new Comparator<Object>() {

			@Override
			public int compare(Object o1, Object o2) {
				
				ArticleModel obj1 = ((ArticleModel)o1);
				String obj2 = ((String)o2);
				
			}
			
		};
		
		Collections.sort(objList);
		
		return Collections.binarySearch(objList, id, comparator);
		
	}*/

	public void pause(String str) {
		System.out.println();
		System.out.println(str);
		
		try{
			System.in.read();
		}
		catch(Exception e){
			e.printStackTrace(); 
		}
	}
	
}
